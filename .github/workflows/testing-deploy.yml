name: Deploy Monolith to testing stage

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Deploy Implementer'
        default: 'World'
        required: true
      release-version:
        description: 'Release version number'
        required: true
      ticket:
        description: 'Release ticket number in tracker'
        default: 'Without ticket'
        required: false

jobs:
  greet:
    runs-on: ubuntu-latest

    steps:
    - name: Send greeting
      run: echo "Hello ${{ github.event.inputs.name }}"
    - name: Show deploy ticket
      run: echo "Deploy ticket ${{ github.event.inputs.name }}"

  deploy:
   runs-on: ubuntu-latest
   environment: testing
   
   steps:
   - uses: actions/checkout@v3
   
   - name: Login to Yandex Cloud Container Registry
     id: login-cr
     uses: yc-actions/yc-cr-login@v1
     with:
        yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
         
   - name: Build docker image
     env:
       CR_REGISTRY: crpp4a802h6om9om40b4
       CR_REPOSITORY: mono-backend
       IMAGE_TAG: ${{ github.event.inputs.release-version }}
     run: docker build . --file Dockerfile --tag cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:$IMAGE_TAG
     
   - name: Push docker image to Yandex.Cloud registry
     env:
       CR_REGISTRY: crpp4a802h6om9om40b4
       CR_REPOSITORY: mono-backend
       IMAGE_TAG: ${{ github.event.inputs.release-version }}
     run: docker push cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:$IMAGE_TAG
     
   - name: Wait untill Yandex.Cloud process new docker image
     uses: jakejarvis/wait-action@v0.1.1
     with:
       time: '30s'
       
   - name: Set up kubectl on runner
     uses: azure/setup-kubectl@v3
     id: kubectl-install
     with:
       version: v1.22.4
       
   - name: Saving k8s server certificate to file
     id: k8s
     uses: rayhu/save-secret-as-file@v1
     with:
       secret: ${{ secrets.TESTING_K8S_SERVICE_CERTIFICATE }}
       filename: ca.crt
       
   - name: Configure kubectl
     run: |
           kubectl config set-cluster bfs-testing --server=${{ secrets.TESTING_K8S_MASTER_CLUSTER_URL }} --certificate-authority=ca.crt
           kubectl config set-credentials githab-admin --token=${{ secrets.TESTING_K8S_SERVICE_ACCOUNT_TOKEN }}
           kubectl config set-context default --cluster=bfs-testing --user=githab-admin
           kubectl config use-context default
          
   - name: Substitute the real value of variables
     run: |
           sed -i 's/$REGISTRY_ID/crpp4a802h6om9om40b4/g' ./k8s/deployment.testing.yaml
           sed -i 's/$REPOSITORY_NAME/mono-backend/g' ./k8s/deployment.testing.yaml
           sed -i 's/$IMAGE_TAG/${{ github.event.inputs.release-version }}/g' ./k8s/deployment.testing.yaml
           sed -i 's/$DATABASE_URL/${{ secrets.DATABASE_URL }}/g' ./k8s/deployment.testing.yaml
           sed -i 's/$DATABASE_USER/${{ secrets.DATABASE_USER }}/g' ./k8s/deployment.testing.yaml
           sed -i 's/$DATABASE_PASSWORD/${{ secrets.DATABASE_PASSWORD }}/g' ./k8s/deployment.testing.yaml
           sed -i 's/$AUTH_TOKEN_SECRET/${{ secrets.AUTH_TOKEN_SECRET }}/g' ./k8s/deployment.testing.yaml
           sed -i 's/$AUTH_TOKEN_AUDIENCE/${{ secrets.AUTH_TOKEN_AUDIENCE }}/g' ./k8s/deployment.testing.yaml
           sed -i 's/$AUTH_TOKEN_ISSUER/${{ secrets.AUTH_TOKEN_ISSUER }}/g' ./k8s/deployment.testing.yaml
  
   - name: Deploy to k8s
     run: kubectl apply -f ./k8s/deployment.testing.yaml
  
          
